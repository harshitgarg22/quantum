from qiskit import QuantumRegister, ClassicalRegister
from qiskit import QuantumCircuit, execute, Aer
import numpy as np

qc = QuantumCircuit()

q = QuantumRegister(5, 'q')
c = ClassicalRegister(5, 'c')

qc.add_register(q)
qc.add_register(c)

qc.rx(np.pi / 2, q[0])
qc.ry(np.pi / 2, q[1])
qc.rx(np.pi / 2, q[2])
qc.ry(np.pi / 2, q[3])
qc.rx(np.pi / 2, q[4])
qc.ry(np.pi / 2, q[0])
qc.u3(0, 0, -(np.pi / 2), q[1])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.rx(np.pi / 2, q[3])
qc.ry(np.pi / 2, q[4])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[0])
qc.cz(q[2], q[1])
qc.u3(0, 0, -(np.pi / 2), q[3])
qc.ry(np.pi / 2, q[4])
qc.u3(0, 0, -(np.pi / 2), q[0])
qc.swap(q[2], q[1])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[4])
qc.cu1(np.pi / 6, q[2], q[1])
qc.u3(0, 0, -(np.pi / 2), q[4])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[1])
qc.ry(np.pi / 2, q[2])
qc.rx(np.pi / 2, q[1])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.cz(q[2], q[3])
qc.swap(q[2], q[3])
qc.cu1(np.pi / 6, q[2], q[3])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[2])
qc.rx(np.pi / 2, q[3])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.rx(np.pi / 2, q[3])
qc.cz(q[2], q[0])
qc.swap(q[2], q[0])
qc.cu1(np.pi / 6, q[2], q[0])
qc.rx(np.pi / 2, q[0])
qc.ry(np.pi / 2, q[1])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[2])
qc.rx(np.pi / 2, q[0])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[1])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.u3(0, 0, -(np.pi / 2), q[0])
qc.cz(q[2], q[4])
qc.swap(q[2], q[4])
qc.cu1(np.pi / 6, q[2], q[4])
qc.ry(np.pi / 2, q[2])
qc.rx(np.pi / 2, q[3])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[4])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.rx(np.pi / 2, q[3])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[4])
qc.cz(q[2], q[0])
qc.u3(0, 0, -(np.pi / 2), q[4])
qc.swap(q[2], q[0])
qc.cu1(np.pi / 6, q[2], q[0])
qc.ry(np.pi / 2, q[0])
qc.rx(np.pi / 2, q[1])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[2])
qc.ry(np.pi / 2, q[0])
qc.rx(np.pi / 2, q[1])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.rx(np.pi / 2, q[0])
qc.u3(0, 0, -(np.pi / 2), q[1])
qc.cz(q[2], q[4])
qc.swap(q[2], q[4])
qc.cu1(np.pi / 6, q[2], q[4])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[2])
qc.rx(np.pi / 2, q[3])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[4])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.ry(np.pi / 2, q[3])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[4])
qc.cz(q[2], q[1])
qc.u3(0, 0, -(np.pi / 2), q[3])
qc.swap(q[2], q[1])
qc.cu1(np.pi / 6, q[2], q[1])
qc.ry(np.pi / 2, q[1])
qc.u3(np.pi / 2, -(np.pi / 4), np.pi / 4, q[2])
qc.u3(0, 0, -(np.pi / 2), q[2])
qc.cz(q[2], q[3])
qc.swap(q[2], q[3])
qc.cu1(np.pi / 6, q[2], q[3])
qc.measure(q[0], c[0])
qc.measure(q[1], c[1])
qc.measure(q[2], c[2])
qc.measure(q[3], c[3])
qc.measure(q[4], c[4])

backend = Aer.get_backend('qasm_simulator')
job = execute(qc, backend=backend)
job_result = job.result()
print(job_result.get_counts(qc))
